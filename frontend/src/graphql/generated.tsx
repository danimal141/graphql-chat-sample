import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of CreateRoom */
export type CreateRoomInput = {
  name: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateRoom */
export type CreateRoomPayload = {
  __typename?: "CreateRoomPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors: Array<Scalars["String"]>;
  room?: Maybe<Room>;
};

export type Message = {
  __typename?: "Message";
  author: User;
  body: Scalars["String"];
  id: Scalars["ID"];
  room: Room;
};

/** Autogenerated return type of MessageWasAdded */
export type MessageWasAddedPayload = {
  __typename?: "MessageWasAddedPayload";
  message?: Maybe<Scalars["String"]>;
};

export type Mutation = {
  __typename?: "Mutation";
  createRoom?: Maybe<CreateRoomPayload>;
  postMessage?: Maybe<PostMessagePayload>;
  /** An example field added by the generator */
  testField: Scalars["String"];
};

export type MutationCreateRoomArgs = {
  input: CreateRoomInput;
};

export type MutationPostMessageArgs = {
  input: PostMessageInput;
};

/** Autogenerated input type of PostMessage */
export type PostMessageInput = {
  room: Scalars["String"];
  message: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of PostMessage */
export type PostMessagePayload = {
  __typename?: "PostMessagePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors: Array<Scalars["String"]>;
  message?: Maybe<Scalars["String"]>;
};

export type Query = {
  __typename?: "Query";
  currentUser: User;
  room: Room;
  testField: Scalars["String"];
};

export type QueryRoomArgs = {
  name: Scalars["String"];
};

export type Room = {
  __typename?: "Room";
  id: Scalars["ID"];
  messages: Array<Message>;
  name: Scalars["String"];
};

export type Subscription = {
  __typename?: "Subscription";
  messageWasAdded: MessageWasAddedPayload;
};

export type User = {
  __typename?: "User";
  messages: Array<Message>;
  name: Scalars["String"];
  sub: Scalars["ID"];
};

export type CreateRoomMutationVariables = Exact<{
  input: CreateRoomInput;
}>;

export type CreateRoomMutation = { __typename?: "Mutation" } & {
  createRoom?: Maybe<
    { __typename?: "CreateRoomPayload" } & {
      room?: Maybe<{ __typename?: "Room" } & Pick<Room, "name">>;
    }
  >;
};

export type CurrentUserQueryVariables = Exact<{ [key: string]: never }>;

export type CurrentUserQuery = { __typename?: "Query" } & {
  currentUser: { __typename?: "User" } & Pick<User, "sub">;
};

export type PostMessageMutationVariables = Exact<{
  input: PostMessageInput;
}>;

export type PostMessageMutation = { __typename?: "Mutation" } & {
  postMessage?: Maybe<
    { __typename?: "PostMessagePayload" } & Pick<PostMessagePayload, "message">
  >;
};

export type RoomQueryVariables = Exact<{
  name: Scalars["String"];
}>;

export type RoomQuery = { __typename?: "Query" } & {
  room: { __typename?: "Room" } & Pick<Room, "name"> & {
      messages: Array<
        { __typename?: "Message" } & Pick<Message, "body"> & {
            author: { __typename?: "User" } & Pick<User, "name">;
          }
      >;
    };
};

export type MessageWasAddedSubscriptionVariables = Exact<{
  [key: string]: never;
}>;

export type MessageWasAddedSubscription = { __typename?: "Subscription" } & {
  messageWasAdded: { __typename?: "MessageWasAddedPayload" } & Pick<
    MessageWasAddedPayload,
    "message"
  >;
};

export const CreateRoomDocument = gql`
  mutation CreateRoom($input: CreateRoomInput!) {
    createRoom(input: $input) {
      room {
        name
      }
    }
  }
`;
export type CreateRoomMutationFn = Apollo.MutationFunction<
  CreateRoomMutation,
  CreateRoomMutationVariables
>;

/**
 * __useCreateRoomMutation__
 *
 * To run a mutation, you first call `useCreateRoomMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRoomMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRoomMutation, { data, loading, error }] = useCreateRoomMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateRoomMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateRoomMutation,
    CreateRoomMutationVariables
  >
) {
  return Apollo.useMutation<CreateRoomMutation, CreateRoomMutationVariables>(
    CreateRoomDocument,
    baseOptions
  );
}
export type CreateRoomMutationHookResult = ReturnType<
  typeof useCreateRoomMutation
>;
export type CreateRoomMutationResult = Apollo.MutationResult<CreateRoomMutation>;
export type CreateRoomMutationOptions = Apollo.BaseMutationOptions<
  CreateRoomMutation,
  CreateRoomMutationVariables
>;
export const CurrentUserDocument = gql`
  query CurrentUser {
    currentUser {
      sub
    }
  }
`;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(
  baseOptions?: Apollo.QueryHookOptions<
    CurrentUserQuery,
    CurrentUserQueryVariables
  >
) {
  return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(
    CurrentUserDocument,
    baseOptions
  );
}
export function useCurrentUserLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CurrentUserQuery,
    CurrentUserQueryVariables
  >
) {
  return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(
    CurrentUserDocument,
    baseOptions
  );
}
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;
export type CurrentUserLazyQueryHookResult = ReturnType<
  typeof useCurrentUserLazyQuery
>;
export type CurrentUserQueryResult = Apollo.QueryResult<
  CurrentUserQuery,
  CurrentUserQueryVariables
>;
export const PostMessageDocument = gql`
  mutation PostMessage($input: PostMessageInput!) {
    postMessage(input: $input) {
      message
    }
  }
`;
export type PostMessageMutationFn = Apollo.MutationFunction<
  PostMessageMutation,
  PostMessageMutationVariables
>;

/**
 * __usePostMessageMutation__
 *
 * To run a mutation, you first call `usePostMessageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePostMessageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [postMessageMutation, { data, loading, error }] = usePostMessageMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePostMessageMutation(
  baseOptions?: Apollo.MutationHookOptions<
    PostMessageMutation,
    PostMessageMutationVariables
  >
) {
  return Apollo.useMutation<PostMessageMutation, PostMessageMutationVariables>(
    PostMessageDocument,
    baseOptions
  );
}
export type PostMessageMutationHookResult = ReturnType<
  typeof usePostMessageMutation
>;
export type PostMessageMutationResult = Apollo.MutationResult<PostMessageMutation>;
export type PostMessageMutationOptions = Apollo.BaseMutationOptions<
  PostMessageMutation,
  PostMessageMutationVariables
>;
export const RoomDocument = gql`
  query Room($name: String!) {
    room(name: $name) {
      name
      messages {
        author {
          name
        }
        body
      }
    }
  }
`;

/**
 * __useRoomQuery__
 *
 * To run a query within a React component, call `useRoomQuery` and pass it any options that fit your needs.
 * When your component renders, `useRoomQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRoomQuery({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function useRoomQuery(
  baseOptions: Apollo.QueryHookOptions<RoomQuery, RoomQueryVariables>
) {
  return Apollo.useQuery<RoomQuery, RoomQueryVariables>(
    RoomDocument,
    baseOptions
  );
}
export function useRoomLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<RoomQuery, RoomQueryVariables>
) {
  return Apollo.useLazyQuery<RoomQuery, RoomQueryVariables>(
    RoomDocument,
    baseOptions
  );
}
export type RoomQueryHookResult = ReturnType<typeof useRoomQuery>;
export type RoomLazyQueryHookResult = ReturnType<typeof useRoomLazyQuery>;
export type RoomQueryResult = Apollo.QueryResult<RoomQuery, RoomQueryVariables>;
export const MessageWasAddedDocument = gql`
  subscription MessageWasAdded {
    messageWasAdded {
      message
    }
  }
`;

/**
 * __useMessageWasAddedSubscription__
 *
 * To run a query within a React component, call `useMessageWasAddedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useMessageWasAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMessageWasAddedSubscription({
 *   variables: {
 *   },
 * });
 */
export function useMessageWasAddedSubscription(
  baseOptions?: Apollo.SubscriptionHookOptions<
    MessageWasAddedSubscription,
    MessageWasAddedSubscriptionVariables
  >
) {
  return Apollo.useSubscription<
    MessageWasAddedSubscription,
    MessageWasAddedSubscriptionVariables
  >(MessageWasAddedDocument, baseOptions);
}
export type MessageWasAddedSubscriptionHookResult = ReturnType<
  typeof useMessageWasAddedSubscription
>;
export type MessageWasAddedSubscriptionResult = Apollo.SubscriptionResult<MessageWasAddedSubscription>;
